name: CI_DevSecOps

on:
 push:
    branches: [ main ]
 pull_request:
    branches: [ main ]

jobs:
  setup:
    name: Setup & Install
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11 (LTS)
      uses: actions/setup-java@v1
      with:
        java-version: 11
        architecture: x64
    - name: Restore Maven cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - run: java --version && mvn --version
    - name: Install Dependencies
      run: mvn install -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true

#  secret-scan:
#    name: Secret scanner
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all history so multiple commits can be scanned
#      - name: GitGuardian scan
#        uses: GitGuardian/gg-shield-action@master
#        with:
#          args: -v --all-policies
#        env:
#          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
#          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
#          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
#          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
#          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  build:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
 #   needs: [ setup, secret-scan ]
    needs: [ setup ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11 (LTS)
      uses: actions/setup-java@v1
      with:
        java-version: 11
        architecture: x64
    - name: Restore Maven cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - run: java --version && mvn --version
    - name: Build project with Maven
      run: mvn -B clean package
    - name: Publish Artefact
      uses: actions/upload-artifact@v1
      with:
        name: Application Jar
        path: target/demo-0.0.1-SNAPSHOT.jar
#    - name: Login to GitHub Container Registry
#      uses: docker/login-action@v1
#      with:
#        registry: ghcr.io
#        username: ${{ github.repository_owner }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#    - name: Build and push
#      id: docker_build
#      uses: docker/build-push-action@v2
#      with:
#        context: .
#        pull: true
#        push: true
#        tags: ghcr.io/${{ github.repository }}/app:latest
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build, tag, and push image to DockerHub
      id: docker_build
     # if: steps.lint.outputs.changed == 'true' OR if scans are OK 
      run: |
        # Build a docker container and push it to DockerHub
        docker build -t davarski/k8s-demo-app-java:v1.0 .
        echo "Pushing image to DockeHub..."
        docker push davarski/k8s-demo-app-java:v1.0 
    - run: echo ${{ steps.docker_build.outputs.digest }}

  oss-scan:
    name: SCA - Dependency Checker
    runs-on: ubuntu-latest
    #   needs: [ setup, secret-scan ]
    needs: [ setup ]
    steps:
    - uses: actions/checkout@v2
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven-3-jdk-11@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk-report.sarif
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
       name: snyk-findings
       path: snyk-report.sarif
      
  license_check:
    name: License Checker
    runs-on: ubuntu-latest
    # needs: [ setup, secret-scan ]
    needs: [ setup ]
    steps:
    - name: Checkout the code
      uses: actions/checkout@master
    - name: Set up JDK 11 (LTS)
      uses: actions/setup-java@v1
      with:
        java-version: 11
        architecture: x64
    - name: Restore Maven cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.2
        bundler-cache: false
    - run: gem install license_finder
    - run: license_finder

  sast:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Set up JDK 11 (LTS)
      uses: actions/setup-java@v1
      with:
        java-version: 11
        architecture: x64
    - name: Restore Maven cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
#    - name: Run Spot Bugs (needs integration with CodeQL)
#      continue-on-error: true
#      run: mvn compile spotbugs:check
#    - uses: jwgmeligmeyling/spotbugs-github-action@master
#      with:
#        path: '**/spotbugsXml.xml'
#    - name: Initialize CodeQL
#      uses: github/codeql-action/init@v3
#      with:
#        languages: java
#    - name: Autobuild
#      uses: github/codeql-action/autobuild@v3
#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v3

  container-scan:
    name: Scan Container Image
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: anchore/scan-action@v2
      id: scan
      with:
        image: davarski/k8s-demo-app-java:v1.0 
        acs-report-enable: true
        # fail-build: true
        fail-build: false
        severity-cutoff: critical
 #   - name: upload Anchore scan SARIF report
 #     uses: github/codeql-action/upload-sarif@v1
 #     with:
 #       sarif_file: ${{ steps.scan.outputs.sarif }}

    - name: Docker Scout Scan
      id: scan_docker_scout
      uses: docker/scout-action@v1
      with:
       dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
       dockerhub-password: ${{ secrets.DOCKERHUB_TOKEN }}
       command: quickview,cves
       only-severities: critical,high
       sarif-file: scout-report.sarif
       
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
       name: scout-findings
       path: scout-report.sarif
   
    - uses: aquasecurity/trivy-action@master
      id: scan_trivy
      with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/k8s-demo-app-java:v1.0'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
    - uses: actions/upload-artifact@v3
      if: always()
      with:
       name: trivy-findings
       path: trivy-results.sarif         

  container-lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: hands-lab/dockle-action@v1
      with:
        image: davarski/k8s-demo-app-java:v1.0 
        exit-code: '1'
        exit-level: FATAL

  k8s-lint:
    name: K8s Hardening
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Run kubesec scanner
        uses: controlplaneio/kubesec-action@v0.0.2
        with:
          input: pod.yaml
          exit-code: "0"

  deploy:
    name: Deploy to Test Environment and DAST Scan with OWASP ZAP
    runs-on: ubuntu-latest
    needs: [sast, container-scan, container-lint, k8s-lint, oss-scan, license_check ]
    steps:
      - uses: actions/checkout@v2
      - name: "Create single k3d Cluster with imported Registry"
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: CICD-test-cluster
          args: >-
            --agents 3
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Apply k8s manifests
        run: |
          kubectl apply -f ./pod.yaml

         
      - name: Wait for app
        # TODO: If the Pods never become Ready, e.g. because of config or image problems, this will hang until the workflow
        # times out. Should add a timeout condition to the loop.
        run: |
          while [[ $(kubectl get pods -n default -l app=webapp -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
          sleep 10
      - name: Port Forward to Service
        run: 'kubectl port-forward -n default service/webapp-service 8080:8080 &'

      - name: Test App
        run: |
          curl -v localhost:8080
          
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'


   

#  deploy:
#    name: Deploy to Test Environment
#    runs-on: ubuntu-latest
#    needs: [sast, container-scan, container-lint, k8s-lint, oss-scan, license_check ]
#    steps:
#      - run: echo done

#  dast:
#    runs-on: ubuntu-latest
#    name: DAST
#    needs: deploy
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: ZAP Scan
#        uses: zaproxy/action-baseline@v0.4.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          docker_name: 'owasp/zap2docker-stable'
#          target: 'https://www.zaproxy.org'
#          rules_file_name: '.zap/rules.tsv'
#          cmd_options: '-a'
#    - name: run the docker image
#      run: |
#          docker run -d -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/k8s-demo-app:v1.0
#     - name: ZAP Scan
#        uses: zaproxy/action-baseline@v0.9.0
#        with:
#          target: 'http://localhost:3000'
#          allow_issue_writing: true
#          token: ${{ secrets.GITHUB_TOKEN }}
          
#  defectdojo_import_scan:
#   name: Import Scout Scan to DefectDojo
#   runs-on: ubuntu-latest

#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v2

#   - name: Set up Python
#     uses: actions/setup-python@v2
#     with:
#       python-version: 3.8

#   - name: Install Requests
#     run: pip install requests
 
#   - name: Import Scout Scan 
#     run: |
#        export DEFECT_DOJO_API_TOKEN=548afd6fab3bea9794a41b31da0e9404f733e222
#        python3 defectdojo_import_scan.py --host http://demo.defectdojo.org --product NODE-WEB-APP ---engagement scout --report scout-report.sarif
